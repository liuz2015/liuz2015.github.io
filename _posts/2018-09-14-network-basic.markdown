---
layout:     post
title:      "计算机网络面试知识点总结"
subtitle:   ""
date:       2018-09-14
author:     "Liuz2015"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 计算机网络
---

> 计算机网络的基础知识是面试常考内容，能够体现你对于计算机学科基础知识的掌握情况，所以对计算机网络的基础知识点需要有大致的了解和掌握。本文主要基于《计算机网络》（谢希仁版）一书，对常见的、重要的知识点进行总结。

## 目录
- [简介](#简介)
- [网络层](#网络层)
- [运输层](#运输层)
- [应用层](#应用层)
- [参考资料](#参考资料)

## 简介
1.计算机的性能
- 速率
- 带宽
- 吞吐量
- 时延
- 时延带宽积
- 往返时间
- 利用率

2.未进行网络中的数据交换而建立的规则、标准或约定成为网络协议。
三要素：
- 语法：数据与控制信息的结构或格式。
- 语义：需要发出何种控制信息，完成何种动作以及做出何种响应。
- 同步：事件实现顺序的详细说明。

3.协议分层：
- 各层之间独立
- 灵活性好
- 结构上可分割开
- 易于实现和维护
- 能促进标准化工作

分层内容：
- OSI分层（7层）：{物理层、数据链路层}、网络层、传输层、{会话层、表示层、应用层}。
- TCP/IP分层（4层）：网络接口层、网际层、传输层、应用层。
- 五层协议（5层）：{物理层、数据链路层}、网络层、传输层、应用层。

## 网络层

4.网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。

5.网络层的ip协议：与其配套使用的还有三个协议：
- 地址解析协议ARP
- 网际控制报文协议ICMP
- 网际组管理协议IGMP

IP协议要使用ARP，而后两者则要使用IP协议

6.IP地址（逻辑地址）放在IP数据报的首部，硬件地址放在MAC帧的首部，网络层及以上使用IP地址，数据链路层及以上使用硬件地址。

7.IP地址的分类

A类地址：以0开头， 第一个字节范围：0~127（1.0.0.0 - 126.255.255.255）；

B类地址：以10开头，    第一个字节范围：128~191（128.0.0.0 - 191.255.255.255）；

C类地址：以110开头，  第一个字节范围：192~223（192.0.0.0 - 223.255.255.255）；

10.0.0.0—10.255.255.255， 172.16.0.0—172.31.255.255， 192.168.0.0—192.168.255.255。（Internet上保留地址用于内部）

A类网络网络号是前1个字节

B类网络网络号是前2个字节

C类网络网络号是前3个字节

8.IP地址如何寻找：IP地址分为网络号和主机号，不同网络之间由路由器相互连接，路由器也就负责了IP请求的转发；每台主机（包括路由器）会存储目的IP与下一跳IP的映射表；当一台主机发出IP请求，首先检查本机的映射表，检查该IP的网络是否本网络，若不是，则发送给路由器；路由查找映射表获取该目的IP的映射，转发到下一个接口，知道找到目的网络，将该IP请求发送给该网络的路由器，由该路由器再去查找目的主机。

9.子网
在IP地址中增加一个子网号字段。
对外仍展现为一个网络。
网络号，子网号，主机号
在根据IP号找到该网路的路由器后，再由该路由器查找子网号找到目的子网，将IP数据报交付给目的子网，目的子网再根据IP数据报中的目的地址将IP数据报送到目的主机。
IP与子网掩码相与得到子网的网络地址。
之前子网号不能全0或全1，不过现在可以了。

10.超网，路由汇聚：是把一组路由汇聚为一个单个的路由广播。路由汇聚的最终结果和最明显的好处是缩小网络上的路由表的尺寸。

算法实现：
1）将各子网地址的网段以二进制写出。

2）比较，从第1位比特开始进行比较，将从开始不相同的比特到末尾位填充为0。由此得到的地址为汇总后的网段的网络地址，其网络位为连续的相同的比特的位数。

假设下面有4个网络:

172.18.129.0/24

172.18.130.0/24

172.18.132.0/24

172.18.133.0/24

如果这四个进行路由汇聚,能覆盖这四个网络的汇总地址是:172.18.128.0/21

算法为：129的二进制代码是10000001

130的二进制代码是10000010

132的二进制代码是10000100

133的二进制代码是10000101

这四个数的前五位相同都是10000，所以加上前面的172.18这两部分相同的位数，网络号就是8+8+5=21（前面两个8就是172和18，本身都是八位的二进制）。而10000 000的十进制数是128，所以，路由汇聚的Ip地址就是172.18.128.0。所以最终答案就是172.18.128.0/21

11.二叉搜索，0-1二叉树：进行网络地址的搜索。

12.ARP是地址解析协议，是解决同一个局域网上的主机和路由器ip和MAC地址的解析。
1：首先，每个主机都会在自己的ARP高速缓存中建立一个ARP列表，以表示IP地址和MAC地址之间的映射关系。
2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机，IP地址，源主机MAC地址，目的主机的IP地址。
3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。
4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。

广播发送ARP请求，单播发送ARP响应。
路由器需要转发，至少连接两个网络，因此至少有两个IP地址和物理地址。

13.各种协议

ICMP协议： 因特网控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。

TFTP协议： 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。

HTTP协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。

DHCP协议： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。

NAT协议：网络地址转换属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，

DHCP协议：一个局域网的网络协议，使用UDP协议工作，用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。

## 运输层

1.运输层为应用层进程之间提供端到端的逻辑通信，可以复用和分用。

2.端口号是应用层协议进程与运输实体进行层间交互的一种地址。

3.TCP对应的协议：
FTP：定义了文件传输协议，使用21端口。
Telnet：一种用于远程登陆的端口，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。
SMTP：邮件传送协议，用于发送邮件。服务器开放的是25号端口。
POP3：它是和SMTP对应，POP3用于接收邮件。POP3协议所用的是110端口。
HTTP：是从Web服务器传输超文本到本地浏览器的传送协议。

UDP对应的协议：
DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。
SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。
TFTP(Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。

4.UDP特点：
- 无连接，不需要建立连接，也就不需要释放连接，减少开销
- 尽最大努力交付，因此是不可靠的
- 面向报文，保留报文边界，一次交付一个完整报文
- 没有拥塞控制
- 一对一、一对多、多对一、多对多
- 首部开销小，8字节

5.TCP特点：
- 是面向连接的运输层协议
- 每一条TCP连接只能有两个端点(一对一)
- TCP提供可靠交付的服务，无差错、无丢失、不重复、按顺序到达
- TCP提供全双工通信，任何时候都能发送数据，具有接受和发送缓存，应用层把数据发送给缓存后，有TCP进行发送，反之同理
- 面向字节流，保证字节流相同，而数据块由TCP控制

### 可靠传输
6.停止等待协议：A向B发送数据，B收到确认后向A发送确认，A收到B确认后再发送下一组数据。

7.超时重传：A发送数据后超过一段时间没有收到确认（数据有错或丢失），则重新发送，称为超时重传（保留数据副本，数据及确认需要编号，设置超时器）；当确认丢失或者迟到了，都会进行超时重传。

8.上述的停止等待协议的通道利用率低，使用流水线传输提高效率。

9.TCP首部：
- 源端口和目的端口
- 序号：每一个字节都按顺序编号，对2的32次方取模，首部的序号是本报文段第一个字节的序号
- 确认号：若确认号为N，则表明到N-1为止所有数据都正确收到
- 数据偏移：首部长度
- 紧急URG
- 确认ACK
- 推送PSH
- 复位RST
- 同步SYN
- 终止FIN
- 窗口：接收方允许对方发送的数据量
- 检验和
- 紧急指针
- 选项（40字节）

10.窗口滑动算法：有P1、P2、P3三个指针，P1是发送窗口左边界，P2是已发送内容右边界，P3是发送窗口右边界，当接受窗口接收到发送过来的连续数据后，返回连续数据的右边界确认，发送方收到确认后，P1指针右移到已确认接收的下一位，同时P3指针右移相同位数。

11.超时时间：使用自适应算法计算超时时间，RTO（超时时间）=RTTS+4×RTTD，RTTS是RTT的加权平均，RTTS=（1-alpha）×RTT旧+alpha×RTT新，RTTD=（1-beta）×RTTD旧+beta×（RTT新-RTTS）

12.使用选择确认SACK，双方协商后，可以在首部选项中传递已确认的数据块的左边界位置，由于首部选项只有40字节，因此存储四个数据块的信息。

### 流量控制
流量控制是让发送方的发送速率不要太快，让接收方来得及接收。利用滑动窗口机制实现TCP连接上对发送方的流量控制。

TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。

发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况，随时动态地调整对方的发送窗口上限值(可增大或减小)。
如果没有这些“窗口”，那么TCP没发送一段数据后都必须等到接收端确认后才能发送下一段数据，这样做的话TCP传输的效率实在是太低了。
解决的办法就是在发送端等待确认的时候继续发送数据，假设发送到第X个数据段是收到接收端的确认信息，如果X在可接受的范围内那么这样做也是可接受的。这就是窗口（缓冲区）引入的缘由。
#### 窗口
（1）接收端窗口 rwnd     
接收端缓冲区大小。接收端将此窗口值放在 TCP 报文的首部中的窗口字段，传送给发送端。
（2） 拥塞窗口 cwnd (congestion window)    
发送端缓冲区大小
（3）发送窗口swnd
发送窗口的上限值 = Min [rwnd, cwnd]
当 rwnd < cwnd 时，是接收端的接收能力限制发送窗口的最大值。
当 cwnd < rwnd 时，则是网络的拥塞限制发送窗口的最大值。 
![流量控制](../img/in-post/network-basic/pic1.png)
注：每个报文段为 100 字节长，而数据报文段序号的初始值设置为 1。

在箭头上面大写 ACK表示首部中的确认位 ACK，小写 ack 表示字段的值。只有 ACK = 1 时，确认号字段才有意义。

从上图，可以看出接收方的主机 B 进行了三次流量控制。第一次把窗口减小到 rwnd = 300，第二次减小到 rwnd = 100,最后减小到 rwnd = 0，即不允许发送方在发送数据了。这种发送方暂停发送将持续到主机 B 重新发出一个新的窗口值为止。


### 拥塞控制

拥塞控制和流量控制的关系密切，它们之间也存在这一些差别。所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络符合。拥塞控制是一个全局性的过程。相反，流量控制往往指点对点通信量的控制，是个端到端的问题（接收端控制发送端）。

![拥塞控制](../img/in-post/network-basic/pic2.png)

#### 慢开始和拥塞避免

慢开始的慢并不是指 cwnd 的增长速率慢，而是指在 TCP 开始发送报文段时先设置 cwnd = 1 ，使得发送方在开始时只发送一个报文段（目的是先探测一下网络的拥塞情况），然后逐渐增大 cwnd 。这当然比按照大的 cwnd 一下子把许多报文段突然注入到网络中去要慢的多。

为了防止拥塞窗口 cwnd 增长过大引起的网络拥塞，还需要设置一个慢开始门限 ssthresh 状态变量。慢开始门限的用法如下：

（1）当 cwmd < ssthresh 时，使用上述的慢开始算法。

（2）当 cwnd > ssthresh 时，停止使用慢开始算法，而改用拥塞避免算法。

（3）当 cwnd == ssthresh 时，即可使用慢开始算法，也可使用拥塞避免算法。

拥塞避免算法的思路是：让拥塞窗口 cwnd 缓慢的增大，每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1 ，而不是加倍，这样 cwnd 按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢的多。

慢开始门限的设定：

无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有按时收到确认），就把慢开始门限 ssthresh 设置为出现拥塞窗时的发送窗口的一半（但不能小于2）。然后把拥塞窗口 cwnd 重新设置为 1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够的时间把队列中积压的分组处理完毕。

#### 快重传和慢恢复

快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等待自己发送数据时才进行捎带确认（为的是是发送双方及早知道有报文段没有到达对方）而不要等待自己发送数据时才进行捎带确认。

快重传算法规定：发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器到期。

与快重传算法配合使用的还有快恢复算法，其过程有两个要点：

（1）当发送方连续收到三个重复确认时，就执行 “乘法减小” 算法，把慢开始门限减半。这是为了预防网络发生拥塞。注意，接下去不执行慢开始算法。

（2）执行快恢复算法时，把 cwnd 重新设置为慢开始门限 ssthresh 减半后的数值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢性增大。

### 连接运输管理（TCP三次握手、四次握手）

TCP的三个阶段：连接建立，数据传输，连接释放。

三次握手：客户端为A，服务端为B
- B创建传输控制块TCB（存储连接信息：指针、序号等），进入listen状态
- A创建TCB，向B发送请求，SYN=1，seq=x，不携带数据但消耗一个序号，计入syn-sent状态
- B收到请求，向A发送确认，SYN=1，ACK=1，seq=y，ack=x+1，不携带数据但消耗一个序号，进入syn-rcvd
- A收到确认，向B发送确认，ACK=1，ack=y+1，可以携带数据，不携带就不消耗序号，A和B进入established状态

为什么要有第三次A给B的确认呢？防止B收到A发送的已经失效的请求后直接就建立连接，而A实际已经不需要这连接，资源就白白浪费了。

连接释放：四次握手（两个二次握手）
- A向B发送释放请求，FIN=1，seq=u，停止发送数据，进入FIN-WAIT-1
- B向A发送确认，ACK=1，seq=v，ack=u+1，告诉应用层连接要关闭了，不过这个时候，B可能还要向A发送数据的，进入CLOSED-WAIT
- B向A将剩余数据发送完，B发送关闭请求，FIN=1，ACK=1，seq=w，ack=u+1，进入LAST-ACK
- A向B发送确认，ACK=1，seq=u+1，ack=w+1，进入TIME-WAIT
- B收到A请求，关闭连接；A在自己发出请求2MSL时间后，关闭连接

为什么A在TIME-WAIT状态必须等待2MSL的时间呢？
- 为了保证A发送的最后一个ACK报文段能够到达B
- 防止已失效的连接请求报文段出现在本连接中

## 应用层

1.DNS解析过程：
- 在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。 
- 如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 
- 如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 
- 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 
- 如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置(是否设置转发器)进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。 
- 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用的是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。

2.FTP：文件传输协议（英文：File Transfer Protocol，缩写：FTP）是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。它属于网络传输协议的应用层。用户通过一个FTP用户代理与FTP交互。该用户首先提供远程主机的主机名，使本地主机的FTP客户机进程建立一个到远程主机FTP服务器进程的TCP连接。然后，该用户提供用户标识和口令，作为FTP命令的一部分在该TCP连接上传送。一旦该服务器向该用户授权，用户就可以向远程文件系统拷贝存放在本地文件系统中的一个或多个文件（反之亦然）。
- FTP客户机联系FTP服务器的21号端口，指定TCP为运输协议。
- 客户机通过控制连接获得授权。
- 客户机经控制连接通过发送命令浏览远程目录。
- 当服务器接收到一个文件传输命令时，该服务器打开到客户机的一个数据连接。
- 在传输一个文件后，服务器关闭数据连接。
- 服务器打开第二个TCP数据连接，以传输另一个文件。

3.HTTP：Web的应用层协议是超文本传输协议（HTTP），它是Web的核心。

HTTP由两部分程序实现：一个客户机程序和一个服务器程序，它们运行在不同的端系统中，通过交换HTTP报文进行对话。HTTP定义了这些报文的格式以及客户机和服务器是如何进行报文交换的。

HTTP请求过程为：当用户请求一个Web页面（如点击一个超链接）时，浏览器向服务器发出对该页面中所包含对象的HTTP请求报文，服务器接受请求并用包含这些对象的HTTP响应报文进行响应。

HTTP使用TCP（而不是UDP）作为它的支撑运输层协议。HTTP客户机发起一个与服务器的TCP连接，一旦连接建立，浏览器和服务器进程就可以通过套接字接口访问TCP。同时要注意到一点，HTTP服务器不保存关于客户机的任何信息，所以我们说HTTP是一个无状态协议。

## 参考资料
- 《计算机网络》（谢希仁版）

